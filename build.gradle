plugins {
    id 'java'
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven {
        name = 'jitpack'
        url = uri('https://jitpack.io')
    }
    maven {
        name = 'swt-repo'
        url = uri('https://maven-eclipse.github.io/maven')
    }
    maven {
        name = 'meteor-maven'
        url = uri('https://maven.meteordev.org/releases')
    }
    maven {
        name = 'meteor-maven-snapshots'
        url = uri('https://maven.meteordev.org/snapshots')
    }
}

base {
    archivesName = project.archives_base_name
}
version = project.mod_version
group = project.maven_group

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
}

loom {
    accessWidenerPath = file("src/main/resources/thunderhack.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Keep Orbit small but functional
    include(modImplementation("meteordevelopment:orbit:0.2.3"))
    
    // External mod dependencies
    modCompileOnly("meteordevelopment:baritone:1.21-SNAPSHOT")
    
    // Network dependencies required for proxy support
    include(implementation("io.netty:netty-handler-proxy:${project.netty_version}"))
    include(implementation("io.netty:netty-codec-socks:${project.netty_version}"))
}

loom {
    accessWidenerPath = file("src/main/resources/thunderhack.accesswidener")
}

// Configure jar for minimal size
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude 'LICENSE*'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude '*.txt'
    exclude '*.md'
    exclude '**/*.html'
    from("src/main/resources") {
        include "fabric.mod.json"
        include "thunderhack.accesswidener"
        include "thunderhack.mixins.json"
        include "icon.png"
        expand(version: version)
    }
}

tasks.named('processResources').configure {
    def projVersion = project.version
    inputs.property("version", projVersion)
    filteringCharset = "UTF-8"
    
    filesMatching("fabric.mod.json") {
        expand(version: projVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 21
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}

// Utilities task for copying dependencies
task copyDeps(type: Copy) {
    from {
        configurations.runtimeClasspath + configurations.modImpl + configurations.modCompileOnly
    }
    into 'libs'
}
